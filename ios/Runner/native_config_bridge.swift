// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum IosAppEnvironment: Int {
  case dev = 0
  case prod = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct IosAppData {
  var type: IosAppEnvironment

  static func fromList(_ list: [Any?]) -> IosAppData? {
    let type = IosAppEnvironment(rawValue: list[0] as! Int)!

    return IosAppData(
      type: type
    )
  }
  func toList() -> [Any?] {
    return [
      type.rawValue,
    ]
  }
}
private class ConfigHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return IosAppData.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class ConfigHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? IosAppData {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ConfigHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ConfigHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ConfigHostApiCodecWriter(data: data)
  }
}

class ConfigHostApiCodec: FlutterStandardMessageCodec {
  static let shared = ConfigHostApiCodec(readerWriter: ConfigHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ConfigHostApi {
  func userToken() throws -> String?
  func appEnvironment() throws -> IosAppData?
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ConfigHostApiSetup {
  /// The codec used by ConfigHostApi.
  static var codec: FlutterStandardMessageCodec { ConfigHostApiCodec.shared }
  /// Sets up an instance of `ConfigHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ConfigHostApi?) {
    let userTokenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.settingsbundlewithflutter.ConfigHostApi.userToken", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      userTokenChannel.setMessageHandler { _, reply in
        do {
          let result = try api.userToken()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      userTokenChannel.setMessageHandler(nil)
    }
    let appEnvironmentChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.settingsbundlewithflutter.ConfigHostApi.appEnvironment", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      appEnvironmentChannel.setMessageHandler { _, reply in
        do {
          let result = try api.appEnvironment()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      appEnvironmentChannel.setMessageHandler(nil)
    }
  }
}
